#include<iostream>
#include<vector>
#include<boost/graph/adjacency_list.hpp>
#include<boost/graph/dijkstra_shortest_paths.hpp>
#include<boost/graph/kruskal_min_spanning_tree.hpp>
typedef boost::adjacency_list<boost::vecS, boost::vecS, boost::undirectedS,
                              boost::no_property,
                              boost::property<boost::edge_weight_t, int>
                              > weighted_graph;
typedef boost::property_map<weighted_graph, boost::edge_weight_t>::type weight_map;
typedef boost::graph_traits<weighted_graph>::edge_descriptor edge_desc;
using namespace std;
int dijkstra_dist(int n,const weighted_graph &G,int s) {
  vector<int> dist_map(n);
  boost::dijkstra_shortest_paths(G,s,
                        boost::distance_map(boost::make_iterator_property_map(dist_map.begin(),
                        boost::get(boost::vertex_index, G))));
  int maxD=-1;
  for(int i=0;i<n;i++){
    if(dist_map[i]>maxD){
      maxD=dist_map[i];
    }
  }
  return maxD;
}
int kruskal(weighted_graph &G){
  std::vector<edge_desc> mst; // vector to store MST edges (not a property map!)
  boost::kruskal_minimum_spanning_tree(G,back_inserter(mst));
  weight_map weights = boost::get(boost::edge_weight, G);
  int sum=0;
  for(vector<edge_desc>::iterator it = mst.begin(); it != mst.end(); ++it){
    sum+=weights[(*it)];
  }
  return sum;
}

void test(){
  int n,m; cin>>n>>m;
  weighted_graph G(n);
  weight_map weights = boost::get(boost::edge_weight, G);
  for(int i=0;i<m;i++){
    int v_1,v_2,w;
    cin>>v_1>>v_2>>w;
    auto e = boost::add_edge(v_1,v_2,G).first;
    weights[e]=w;
  }
  cout<<kruskal(G)<<" "<<dijkstra_dist(n,G,0)<<endl;
}
int main(){
  int cases;
  cin>>cases;
  for(;cases;cases--){
    test();
  }
}